login
    website
        static - things wouldnt change like javascript images etc
        templates - have html templates
            base.html - how our entire website look like (theme of our website)
        __init__.py - making the website folder a package
        auth.py     
        models.py   -disord database models
        views.py    - store views or url end ponts for the actual frontend of our website
    main.py - we will run this when we want to run a webserver


__init__.py
    app == Flask(__name__)
    app.config['Secret_key']= ''(encrypt and secure the cokies and session data of our app)
return app
main.py
    import that createate app
    and run the app(debug=true)->debug=true means it will run the webserver when there is a change in the code
views.py
    stores the standard routes for our website say the login page 
    it is a bluprint of our website
    import bluprints -> bluprints allow us to define multiplefiles
    @views.route('/')
    def home() -> home function will run when we go to home route 
after defining the routes in views we need to register in __init__.py
main.py
    from .views import views(name of blue print)\
    app.regiester_blueprint(views, urlprifix = '/')(registering views)
same to auth as views
templates
    jinja(templeting language) help us write python inside html documents
    create base.html ->it cointains common html code where we use in all other files
    dnld css for the app
    we use jinja(templeting engine) {% "write pythoncode here" %}
        inside this % % signs we can write if statements for loops expression you want to valuate or 
        we an write a block templete where we can overwrite in childerns templete(if we import this and extends the extended part will show in this block )
    initilise it in views.py and auth.py
    code for loading javasecript
        <script>
          type = "text/javascript"
          src = "{{url_for('static',filename='index.js')}}"
        </script>
        static is a folder name filename is the name of the file
        url_for is a python function finds url for the folder
    {{}} in html file we can write a python expression 
    How to pass a variable from backend(python code) to a html 
        In the view.py(py file) in the render_templete() add the variable(like passing while calling a function) 
        In the html end pass the variable {{}}(write the variable name to use in it)
        
        if statements in html
        {% if (condition)%}
            statement for the condition
        {%elif%}
            statement for it
        {%else%}
            statement for it
        {%endif%}
     signup.html
        do html css
Http ->    have different methods 
    get request or get method
    post
    put
    delete 
    update...
    what type of request sent to your website
        generally get request is when you are loading a website, 
        in post request means some kind of change in your database or some kind of change in your web server
    *in sign in page we added method = POST*
__init__.py
    Stting up database ->import SQlAlchamy
    we are uing sqlite to locate the database app.config['SQLALCHEMEY_DATABASE_URI'] = f'sqlite:///{DB_NAME}'
    here sqlite is located at f'sqlite:///{DB_NAME}' this location
    initilise it with our flask app db.init_app(app)
models.py
    we are creating database models
    create a User(db.Model,UserMixin) class where we can define coulms in the table
    we store note information in notes class (general database model) structure of database look like this
    first we create id for the notes for each tme user created a notes 
    forien key <A coulm that in your database which reference to another colum of another database>
    in User class add notes reltionship where every time user add or delete notes makes changes here(user table)
    ->Model.py we created how the table look like 
__init__.py 
    Create database <Createdatabase function> to check if the database exists and creates if not exists
auth.py
    We import User class from the models
    we use from werkzeug.security import generate_password_hash,check_password_hash to hash the password such that inverse is not possible